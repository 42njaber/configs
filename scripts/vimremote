#!/bin/env bash
# vim: ft=sh

# -use return value from ${PIPESTATUS[0]}, because ! hosed $?
! getopt --test > /dev/null 
if [[ ${PIPESTATUS[0]} -ne 4 ]]; then
    echo 'I’m sorry, `getopt --test` failed in this environment.' >&2
    exit 1
fi

# option --output/-o requires 1 argument
OPTIONS=se:w

# -pass arguments only via   -- "$@"   to separate them correctly
! PARSED=$(getopt --options=$OPTIONS --name "$0" -- "$@")
if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
    exit 2
fi
# read getopt’s output this way to handle the quoting right:
eval set -- "$PARSED"

s=true
e=false
w=

# now enjoy the options in order and nicely split until we see --
while true; do
    case "$1" in
        -s)
            s=false
            shift 1
            ;;
        -w)
            w=-wait
            shift 1
            ;;
        -e)
            e=true
            ex_cmd="`sed "s/'/\\\"/g" <<< "$2"`"
            shift 2
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "Programming error" >&2
            exit 3
            ;;
    esac
done

# handle non-option arguments

SESSION_NAME="`tmux display -p "#{session_name}"`"
VIMPANE="`tmux display -p "#{@vimpane}"`"
REMOTE=$(vim --servername $SESSION_NAME --remote-expr "v:servername" 2>/dev/null)

if test "$REMOTE"; then
    if $e; then
        vim --servername "$REMOTE" --remote-expr "execute(\"${ex_cmd//\"/\\\"}\")"
    fi

    if [[ $# -gt 0 ]]; then
        vim --servername "$REMOTE" --remote$w "$@"
        if $s; then
            tmux switch-client -t "$VIMPANE"
        fi
    elif $e; then
        true
    else
        echo "$0: One or more input files are required." >&2
        exit 4
    fi
else
    echo "Server not found, opening local session" >&2
    if $e; then
        echo "Cannot run Ex command without a server" >&2
        exit 5
    fi

    vim $@
fi
